/**
@page User-Install How to install ESsistMe

\tableofcontents

@section User-Install_General Introduction

@section User-Install_Distrib Installing from distribution kits

The program is fully open source, so if you do not like some of its services,
you may fix or enhance it. The development is available from the repository 
https://github.com/jvegh/ESsistMe, which enables you to download or browse the files.
The repository also contains  distribution packages of different forms and composition,
and for different platforms. Most users need only the binary (apps) and documentation (docs)
packages.


@section User-Install_source Installing from source

The program can be downloaded from

https://github.com/jvegh/ESsistMe

The executable program can be be generated by using CMake @cite CMake:2016, an open-source,
cross-platform family of tools designed to build, test and package software.

@subsection User-Install_3rdParty The 3rd-party components
The 3-rd party components belong to their respective owners, mentioned in the documentation.
They are eventually supplemented, commented or slightly changed, as described below.

@subsubsection User-Install-3rd-QCustomPlot QCustomPlot

This library (or widget) is actively developed at the time of writing, and it is beta.
A snapshot is included in the distribution because of two reasons:
 - the beta stage can be source of compilation errors, if you download another version
 - the package uses fixed relative include paths, and it was changed to CMake configurable include paths

@subsubsection User-Install-3rd-Minuit Minuit

This library is available from CERN

- it is extended with spectroscopy-related features
- the package uses fixed relative include paths, and it was changed to CMake configurable include paths


@section User-Install_directories Directories

The application uses a couple of distinguished directories.
Since the application is multiplatform, and at least partly the user can configure them,
in this description only the functionality is given, and some hints are made to the concrete,
platform-dependent names.

The application internally uses the directory hierarchy shown below.
If you install it as described here, your operating system will make the structure.
If, for some reason, you change it manually, make sure _not_ to change the structure:
the application presumes this hierarchy during operation. Upon starting,
the tool verifies/sets/creates/changes things, related to its operation.
Neither system nor user settings are touched. 

When the tool starts up, 
it verifies whether the install directory structure exists.
A single binary executable file is the bare minimum, but
several other files and directories enhance its functionality.
It can work even without those other subdirectories and files,
but the related functionality will not be available.
The tool makes a self-test at the beginning, and accounts for those
available enhancements. See section @ref User_Install_System_Bin.

Also part of the initial startup is to set up the user directory and the
directories and files the application works with. For details see @ref User_Install_UserDir.

 
@subsection User_Install_SystemDir Installation directory

When the tool gets installed, the system-related files are organized
in the directories and subdirectories as shown below. 
@verbatim
  InstallDir
  |--/bin
  |--/data
  |--/doc
@endverbatim

Those directories are read-only, and typically they are touched only during installation.
Since most of the prospective users are science professionals, rather than system administrators,
the distribution kit is designed to be installed in the user's home directory.
It means that you may install (and also upgrade) the system in your own home directory,
but you may also ask your system administrator to install it for all users of the computer.

@subsubsection User_Install_System_Bin The binaries
@verbatim |--InstallDir/bin @endverbatim directory contains the executable files.

@subsubsection User_Install_System_Data The data
@verbatim |--InstallDir/data @endverbatim directory contains executable-related  data files.

@subsubsection User_Install_System_Doc The documentation
@verbatim |--InstallDir/doc @endverbatim The directory contains the documentation of the system.

@verbatim |--InstallDir/doc/ESsistMe.chm @endverbatim
This single document comprises all related user information.
To read it, please install a CHM viewer application on your system.
The different chapters of the document are targeting different types of users.

@verbatim |--InstallDir/doc/mntutorial.pdf @endverbatim
This document is available for downloading from http://seal.web.cern.ch/seal/documents/minuit/mntutorial.pdf,
it is included in the distribution only for comfort.




@subsection User_Install_UserDir User directory

@verbatim
  |WorkDir
  |../data
  |../output
@endverbatim
This is the only directory where the program generates files,
which may be interesting for the typical user.
The tool is presumed to work in a directory structure shown above. 
When the application starts up, it verifies whether the required subdirectories exist.
Of course, the  directory can contain further files and/or subdirectories.

The program can be started from any subdirectory, and the work directory will be
the directory it was started from. In order to avoid "polluting" the user's directories,
two directories show up special behavior. The program will not work in the install directory
and in the user's home directory. In the case the program is invoked from any of those 
directories, the program relocates the work directory to 
@verbatim
  |UserHome/PackageName
@endverbatim

In any case, if the work directory exists at the time when the program starts up, 
the already existing directory will be used. If no such directory found, 
the program creates the needed directory. 

It is a good practice to put together all the stuff used in evaluating spectral data,
i.e. to make "project" for the different evaluation sessions. The concept of 
"work directory" serves this goal: you can put in the 'WorkDir/data' subdirectory
the spectrum files, etc., and generate the results in 'WorkDir/output' subdirectory.

@subsubsection User_Install_User_Data The data
@verbatim |WorkDir/data @endverbatim directory contains your input data.

@subsubsection User_Install_User_Output The output
The @verbatim |WorkDir/output @endverbatim directory contains the output files produced during the session.



@subsection User_Install_UserTemp Temporary directory


The system might need some temporary storage (directory and files).
Normally, the system provides a system-wide area for this goal.
If that can be used, the program creates a separate subdirectory in it,
i.e. the temporary data will be stored in
@verbatim
    TempDir/PackageName
@endverbatim

If for any reason, that are is not available for the program,
it creates a subdirectory in the user's home directory, i.e.
in such a case the temprary files go in subdirectory

@verbatim
  UserHome/PACKAGE_NAME/temp
@endverbatim

@subsection User_Install_UserConfigDir Configuration directory

The application also uses a configuration subdirectory,
where the program settings are stored. To enable using platform independent
handling of settings, the program uses '.INI' files.
When starting up, the program creates a subdirectory in it,
and loads/store program settings from/to directory
@verbatim
  UserHome/ConfigDir/PACKAGE_NAME
@endverbatim


@section User-Install_files Files

The program uses and also creates some special files,
in special subdirectories and with special file names.

@subsection User_Install_UserFileConf Configuration directory
As mentioned in section @ref User_Install_UserConfigDir, 
the actual settings are stored in file
@verbatim
  UserHome/ConfigDir/PACKAGE_NAME/PACKAGE_NAME PACKAGE_VERSION.ini
@endverbatim

When the user exits the tool, the actual settings are saved in the file
and the next time are loaded again. 
This means that  the user may continue the next session exactly 
with the same settings used in the past session. 
Please notice that the file name contains also the version number,
i.e. you can use different settings for different program versions.
And of course, you need to copy manually the setting if you start with a new version.

@subsection User_Install_SetupDir Setting up directories

The directories are set up as part of the initialization.

@subsubsection UserInstallSetupSystem

To set up system directory is part of the installation, see \ref User_Install_SystemDir.
The only thing you need to remember is the access path to invode the system.
This can be enlightened by using a link icon on the desktop or the toolbar,
or adding the system subdirectory to the user's PATH variable.

@subsubsection UserInstallSetupWork

One distinguished directory is surely the working directory where the application lives.
It is where the program is invoked from.

The tool attempts NOT to "pollute" both the system directory (where the binary file is stored)
and the user home directory (where all valuable files and subdirectories of the user are located).
If the tool is invoked from these two subdirectories,
the tool creates a work directory (using the name and version of the tool) in the user's home directory,
otherwise uses the current directory (where the tool was invoked from).

In that (maybe newly created) subdirectory it creates the needed subdirectories.
This policy keeps the tool-generated data together.

It is, in general, a good practice to use the concept of "project subdirectory", i.e. to keep all the files
related to evaluation of a certain spectrum in a separate subdirectory.  The best policy is
to create a new subdirectory for a new project, which initially contains your data and settings files,
then cange to that subdirectory and invoke the tool from that subdirectory.
This is where your output files will be written, too.

@subsubsection UserInstallSetupTemp
The system might need temporary storage place, too. This area is normally transparent for the user.
For the normal operation, however, the user needs the corresponding access rights and storage quota
on that device. The system sets it up automatically, asking for the system-wide temporary subdirectory
and prepares a subdirectory (using the name and version of the tool) in it.

*/

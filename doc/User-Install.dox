/**
@page User-Install How to install ESsistMe

\tableofcontents

@section User-Install_General Introduction

This information is usually important for your system manager, the normal install procedure
puts the things to their proper place.
The program is fully open source, so if you do not like some of its services,
you may fix/replace or enhance it. The development is available from its repository,
which enables you to download or browse the files.
The repository also contains  distribution packages of different forms and composition,
and for different platforms. Most users need only the binary (apps) and documentation (docs)
packages.

@subsection User-Instal_Requisites Pre-requisites

The system attempts to use as few 3-rd party components as possible, partly also
to make the installation easier. Both the CMake files and the packages contain
the dependencies. Where reasonable, the 3-rd party component is comprised in the distribution.
Is is for comfort only (and also to avoid versioning collisions), not touching
the copyright if the original authors. Some components, however, must be pre-installed.
It is not an issue if you are using the distribution packages, but if installing from sources,
the pre-requisites must be installed first. Normally, the Qt framework @cite QTProgramming
and the gtest @cite gtest
must be installed,

@subsection User-Instal_Binaries The binaries

The binaries of the system go in directory @ref User_Install_System_Bin

- DemoGaussSim - part if Minuit, illustrates using the minimization subset for programmers
- ESsistMe the tool itself
- ESsistMe_TEST unit testing for the distribution
- testMinuit unit testing for the Minuit minimization subsystem

@section User-Install_Distrib Installing from distribution packages

The ESsistMe system is released in installable packages.
From the repository different distribution packages can be downloaded.
Normally, you need the '-apps' package and the '-docs' package.
The '-tests' is rarely necessary, and '.srcs' are used only be the developers.

@section User-Install_source Installing from source

The program can be downloaded from

https://github.com/jvegh/ESsistMe

The executable program can be be generated by using CMake @cite CMake:2016, an open-source,
cross-platform family of tools designed to build, test and package software.

After downloading the package,
from the InstallDir/build subdirectory

@verbatim cmake ..  @endverbatim

then

@verbatim make  @endverbatim

builds the binaries,

@verbatim make chm  @endverbatim

builds this documentation

@verbatim make package @endverbatim

builds distribution packages

@verbatim make install  @endverbatim

installs the tool for you.

The install process uses default directories. Notice that you can use also
@verbatim make DESTDIR=PATH_TO_YOUR_HOME install @endverbatim
if you want to install the program in your home directory. If you do so,
*$PATH_TO_YOUR_HOME* is interpreted as a *prefix* to the normal path.
See also @ref User_Install_SystemDir.



@subsection User-Install_3rdParty The 3rd-party components
The 3-rd party components belong to their respective owners, mentioned in the documentation.
They are eventually supplemented, commented or slightly changed, as described below.


@subsubsection User-Install-3rd-Qt Qt

@subsubsection User-Install-3rd-QCustomPlot QCustomPlot

This library (or widget) is actively developed at the time of writing, and it is beta.
A snapshot is included in the distribution because of two reasons:
 - the beta stage can be source of compilation errors, if you download another version
 - the package uses fixed relative include paths, and it was changed to CMake configurable include paths

@subsubsection User-Install-3rd-Minuit Minuit

This library is available from CERN

- it is extended with spectroscopy-related features
- the package uses fixed relative include paths, and it was changed to CMake configurable include paths


@section User-Install_directories Directories

The application uses a couple of distinguished directories.
Since the application is multiplatform, and also (at least partly) the user can configure the directories,
in this description only the utilization of the directories is given, and some hints are made to the concrete,
platform-dependent names.

The application internally uses the directory hierarchy shown below.
If you install it as described here, your operating system will make the structure.
If, for some reason, you change it manually, make sure _not_ to change the structure:
the application presumes this hierarchy during operation.
Upon starting, the tool verifies/sets/creates/changes things, related to its operation, but
neither system nor user settings are touched.

Also part of the initial startup is to set up the user directory and the
directories and files the application works with; for details see @ref User_Install_WorkDir.
When the tool starts up,
it verifies whether the install directory structure exists.
A single binary executable file is the bare minimum, but
several other files and directories enhance its functionality.
The tool makes a self-test at the beginning, and accounts for those
available enhancements. See section @ref User_Install_System_Bin.
If some component is *not* found during startup, the related functionality will *not* be available:
you receive a warning message and
some buttons and menu items will be disabled (i.e. the functionality will be restricted).


 
@subsection User_Install_SystemDir Installation directory

When the tool gets installed, the system-related files are organized
in directories and subdirectories as shown below.
@verbatim
  InstallDir
  |--/bin
  |--/data
  |--/docs
@endverbatim

Those directories are read-only, and typically they are touched only during installation.
The distribution kit is designed to be installed in the standard subdirectory
for optional software packages @cite FileSystemHierarchy:2016.
For this action you need administrative rights, or the help of your system administrator.
It means that you may install (and also upgrade) the system in your own home directory,
but you may also ask your system administrator to install it for all users of the computer.

In Linux, according to @cite FileSystemHierarchy:2016, the application is installed by default to
@verbatim /opt/essistme @endverbatim.
Since most of the prospective users are science professionals, rather than system administrators,
it is also possible to extract the mentioned files from the install packages into a subdirectory in your home directory,
see also @ref User-Install_source.
In that case the install directory will be @verbatim USER_HOME/opt/empathy86 @endverbatim, see also
In certain cases, see @ref User_Install_WorkDir, the system may need create a work directory @verbatim USER_HOME/essistme @endverbatim,
so in this way the contents of the work directory will not interfere with the contents of the install directory.


@subsubsection User_Install_System_Bin The binaries
@verbatim |--InstallDir/bin @endverbatim directory contains the executable files.

@subsubsection User_Install_System_Data The data
@verbatim |--InstallDir/data @endverbatim directory contains executable-related  data files.

@subsubsection User_Install_System_Doc The documentation
@verbatim |--InstallDir/docs @endverbatim The directory contains the documentation of the system.
It contains at least a User's Guide (this document), in .chm form.
Please install the corresponding reader on your platform.

@verbatim |--InstallDir/docs/ESsistMe.chm @endverbatim
This single document comprises all related user information.
To read it, please install a CHM viewer application on your system.
The different chapters of the document are targeting different types of users.

@verbatim |--InstallDir/docs/mntutorial.pdf @endverbatim
This document is available for downloading from http://seal.web.cern.ch/seal/documents/minuit/mntutorial.pdf,
it is included in the distribution only for comfort.


@subsection User_Install_WorkDir User work directory

@verbatim
  |WorkDir
  |../data
  |../output
@endverbatim
This is the only directory where the program generates files,
which may be interesting for the typical user.
The tool is presumed to work in a directory structure shown above, see section @ref User-Work_Project,
When the application starts up, it verifies whether the required subdirectories exist.
Of course, the  directory can contain further files and/or subdirectories.
It is a good idea to store all your files here, including your own spectrum data files,
notes, figures, etc. as well as  log files.

The program can be started from any subdirectory, and the work directory will be
the subdirectory it was started from. In order to avoid "polluting" the user's directories,
two directories show up special behavior. The program will not work in the *install directory*
and in the *user's home directory*. In the case the program is invoked from any of those two
directories, the program relocates the work directory to 
@verbatim
  |UserHome/PackageName
@endverbatim
In any case, if the work directory exists at the time when the program starts up,
the already existing directory will be used. If no such directory found, 
the program creates the needed directory. For details of operation, see section @ref  User-Work_Project.


@subsubsection User_Install_Work_Data The data
@verbatim |WorkDir/data @endverbatim directory contains your input data.

@subsubsection User_Install_Work_Output The output
The @verbatim |WorkDir/output @endverbatim directory contains the output files produced during the session.



@subsection User_Install_UserTemp Temporary directory


The system may need some temporary storage (directory and files).
Normally, the system provides a system-wide area for this goal.
If that area can be used, the program creates a separate subdirectory in it,
i.e. the temporary data will be stored in
@verbatim
    TempDir/PackageName
@endverbatim

If for any reason, that area is not available for the program,
it creates a subdirectory in the user's home directory, i.e.
in such a case the temporary files go in subdirectory

@verbatim
  UserHome/PACKAGE_NAME/temp
@endverbatim

@subsection User_Install_UserConfigDir Configuration directory

The application also uses a configuration subdirectory,
where the program settings are stored. To enable using platform independent
handling of settings, the program uses '.INI' files.
When starting up, the program creates a subdirectory in it,
and loads/stores program settings from/to directory
@verbatim
  UserHome/ConfigDir/PACKAGE_NAME
@endverbatim


@section User-Install_files Files

The program uses and also creates some special files,
in special subdirectories and with special file names.

@subsection User_Install_UserFileConf Configuration directory
As mentioned in section @ref User_Install_UserConfigDir, 
the actual settings are stored in file
@verbatim
  UserHome/ConfigDir/PACKAGE_NAME/PROJECT_NAME PROJECT_VERSION.ini
@endverbatim
For details see section @ref User-Work_Settings.



@subsection User_Install_UserFileLog Logging user activity

The evaluation activity is recorded in a log file.
It means that messages from the program are written in a file.
The messages describe the actions, parameters, etc. Normally,
the log file is not needed for the user. However, the file remembers
which action, in which order, using which parameter values was executed,
so it can serve also as an evaluation diary. The file is written into the
work directory. For details see section @ref User-Work_Logging.

@subsection User_Install_SetupDir Setting up directories

The directories are set up as part of the initialization.
Part of this activity takes place when installing the application,
the rest upon starting the application.

@subsubsection UserInstallSetupSystem

To set up system directory is part of the installation, see \ref User_Install_SystemDir.
The only thing you need to remember is the access path to invoke the system.
This can be enlightened by using a link icon on the desktop or the toolbar,
or adding the system subdirectory to the user's *PATH* variable.

@subsubsection UserInstallSetupWork

One distinguished directory is surely the working directory where the application lives.
It is where the program is invoked from.

The tool attempts NOT to "pollute" both the system directory (where the binary file is stored)
and the user home directory (where all valuable files and subdirectories of the user are located).
If the tool is invoked from these two subdirectories,
the tool creates a work directory (using the name and version of the tool) in the user's home directory,
otherwise uses the current directory (where the tool was invoked from).

In that (maybe newly created) subdirectory it creates the needed subdirectories.
This policy keeps the tool-generated data together. For details see section @ref User-Work_Project.

@subsubsection UserInstallSetupTemp
The system might need temporary storage place, too. This area is normally transparent for the user.
For the normal operation, however, the user needs the corresponding access rights and storage quota
on that device. The system sets it up automatically, asking for the system-wide temporary subdirectory
and prepares a subdirectory (using the name and version of the tool) in it.

*/
